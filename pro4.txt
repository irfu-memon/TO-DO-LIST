#include <iostream>
#include <vector>

using namespace std;

struct Task {
  string description;
  bool completed;
};

vector<Task> tasks;

void addTask() {
  string description;
  cout << "Enter task description: ";
  getline(cin, description);

  Task task;
  task.description = description;
  task.completed = false;
  tasks.push_back(task);

  cout << "Task added successfully!" << endl;
}

void viewTasks() {
  if (tasks.empty()) {
    cout << "No tasks found!" << endl;
    return;
  }

  cout << endl << "** To-Do List **" << endl;
  for (int i = 0; i < tasks.size(); ++i) {
    cout << (i + 1) << ". " << tasks[i].description;
    if (tasks[i].completed) {
      cout << " (Completed)";
    }
    cout << endl;
  }
}

void deleteTask() {
  if (tasks.empty()) {
    cout << "No tasks to delete!" << endl;
    return;
  }

  viewTasks();

  int choice;
  cout << "Enter task number to delete (or 0 to cancel): ";
  cin >> choice;

  if (choice > 0 && choice <= tasks.size()) {
    tasks.erase(tasks.begin() + choice - 1);
    cout << "Task deleted successfully!" << endl;
  } else {
    cout << "Invalid task number!" << endl;
  }
  cin.clear(); // Clear input buffer after invalid input
  cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

int main() {
  int choice;

  do {
    cout << endl << "** To-Do List Manager **" << endl;
    cout << "1. Add Task" << endl;
    cout << "2. View Tasks" << endl;
    cout << "3. Delete Task" << endl;
    cout << "4. Exit" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
      case 1:
        addTask();
        break;
      case 2:
        viewTasks();
        break;
      case 3:
        deleteTask();
        break;
      case 4:
        cout << "Exiting..." << endl;
        break;
      default:
        cout << "Invalid choice!" << endl;
    }
  } while (choice != 4);

  return 0;
}
